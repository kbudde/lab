#@ load("@ytt:data", "data")
#@ application = data.values.application
#@ shared = data.values.shared
---
externalDomain: #@ "ocis." + shared.domain

ingress:
  enabled: true
  tls:
   - secretName: ocis-tls
     hosts:
       - #@ "ocis." + shared.domain

features:
  basicAuthentication: true
  emailNotifications:
    enabled: true
    smtp:
      host: #@ application.smtp.hostname
      #! -- Port of the SMTP host to connect to.
      port: #@ application.smtp.port
      #! -- Sender address of emails that will be sent. Example: 'ownCloud <noreply@example.com>'
      sender: #@ application.smtp.sender
      #! -- Authentication method for the SMTP communication. Possible values are ‘login’, ‘plain’, ‘crammd5’, ‘none’
      #! If set to another value than `none`, a secret referenced by `notificationsSmtpSecretRef` needs to be present.
      authentication: #@ application.smtp.authentication
      #! -- Encryption method for the SMTP communication. Possible values are ‘starttls’, ‘ssl’, ‘ssltls’, ‘tls’ and ‘none’.
      encryption: #@ application.smtp.encryption

services:
  storagesystem:
    persistence:
      enabled: true
      chownInitContainer: true
  storageusers:
    persistence:
      enabled: true
      chownInitContainer: true
      size: 10Gi
  store:
    persistence:
      enabled: true
      chownInitContainer: true
      size: 5Gi
  idm:
    persistence:
      enabled: true
      chownInitContainer: true
      size: 1Gi

#! the ocis helm chart generates the secrets, if they do no exist in the cluster
#! as I am templating the manifests, I have to ensure, that the secrets are not regenerated each time.
#! => setting names here prevents secret generation.
#! secrets are configured using sops. See ../ytt/secrets.yaml
secretRefs:
  #! -- Reference to an existing admin user secret (see ref:Secrets#secrets). Not used if `features.externalUserManagement.enabled` equals `true`.
  adminUserSecretRef: "admin-user"
  #! -- Reference to an existing IDP secret (see ref:Secrets#secrets). Not used if `features.externalUserManagement.enabled` equals `true`.
  idpSecretRef: "idp-secrets"
  #! -- Reference to an existing JWT secret (see ref:Secrets#secrets).
  jwtSecretRef: "jwt-secret"
  #! -- Reference to an existing keycloak client secret, used for the GDPR export. Only used if features.externalUserManagement.gdprExport.enabled equals true.
  machineAuthApiKeySecretRef: "machine-auth-api-key"
  #! -- Reference to an existing storage-system JWT secret (see ref:Secrets#secrets)
  storagesystemJwtSecretRef: "storage-system-jwt-secret"
  #! -- Reference to an existing storage-system secret (see ref:Secrets#secrets)
  storagesystemSecretRef: "storage-system"
  #! -- Reference to an existing thumbnails transfer secret (see ref:Secrets#secrets)
  thumbnailsSecretRef: "thumbnails-transfer-secret"
  #! -- Reference to an existing transfer secret (see ref:Secrets#secrets)
  transferSecretSecretRef: "transfer-secret"
  #! -- Reference to an existing SMTP email server settings secret (see ref:Secrets#secrets).
  #! Not used if `features.emailNotifications.enabled` equals `false`.
  #! Not used if `features.emailNotifications.smtp.authentication` equals `none`.
  notificationsSmtpSecretRef: "notifications-smtp-secret"

  #! TODO: unsure if these are needed. They are autogenerated and referenced
  ldapCaRef: "ldap-ca"
  #! -- Reference to an existing LDAP cert secret (see ref:Secrets#secrets). Not used if `features.externalUserManagement.enabled` equals `true`.
  ldapCertRef: "ldap-cert"
  #! -- Reference to an existing LDAP bind secret (see ref:Secrets#secrets).
  ldapSecretRef: "ldap-bind-secrets"
  #! -- Reference to an existing keycloak client secret, used for the GDPR export. Only used if features.externalUserManagement.gdprExport.enabled equals true.
  gdprExportClientSecretRef: ""
  #! -- Reference to an existing messaging system certificate authority secret (see ref:Secrets#secrets)
  messagingSystemCaRef: ""
  #! -- Reference to an existing s3 secret (see ref:Secrets#secrets)
  #! If not filled in, will attempt to use values in `.storageusers.storageBackend.s3.driverConfig.s3ng` instead.
  s3CredentialsSecretRef: ""

#! References to ConfigMaps.
#! The ConfigMaps need to be manually created.
#! Leave these empty to have them autogenerated by the Helm chart.
#! Note that ConfigMaps generated by the helm chart will be removed once the helm chart is uninstalled.
#! Furthermore, if you already had ConfigMaps at the default locations, they will be NOT be overwritten,
#! but the helm chart will claim ownership of them. If this is a problem, fill in the configRefs below
#! with the names of your existing secrets.
#! See https://doc.owncloud.com/ocis/next/deployment/container/orchestration/orchestration.html#customize-the-generic-setup[doc.owncloud.com] for how to generate them.
configRefs:
  #! -- Reference to an existing storage-users config.
  storageusersConfigRef: "storage-users"
  #! -- Reference to an existing graph config.
  graphConfigRef: "graph"

monitoring:
  enabled: true