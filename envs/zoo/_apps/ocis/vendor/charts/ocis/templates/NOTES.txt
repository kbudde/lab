You're now running
                 ,----..      ,---,   .--.--.
                /   /   \  ,`--.' |  /  /    '.
       ,---.   |   :     : |   :  : |  :  /`. /
      '   ,'\  .   |  ;. / :   |  ' ;  |  |--`
     /   /   | .   ; /--`  |   :  | |  :  ;_
    .   ; ,. : ;   | ;     '   '  ;  \  \    `.
    '   | |: : |   : |     |   |  |   `----.   \
    '   | .; : .   | '___  '   :  ;   __ \  \  |
    |   :    | '   ; : .'| |   |  '  /  /`--'  /
     \   \  /  '   | '/  : '   :  | '--'.     /
      `----'   |   :    /  ;   |.'    `--'---'
                \   \ .'   '---'
                 `---`


You can get the initial "admin" administrator user password by running:

kubectl -n {{ .Release.Namespace }} get secrets/admin-user --template='{{"{{"}}.data.password | base64decode | printf "%s\n" {{"}}"}}'

{{ $noExternalUserManagement := not .Values.features.externalUserManagement.enabled -}}
{{- $noopCache := eq .Values.cache.type "noop" -}}
{{- $basicAuth := .Values.features.basicAuthentication -}}
{{- $demoUsers := .Values.features.demoUsers -}}
{{- $oidcIdpInsecure := .Values.insecure.oidcIdpInsecure -}}
{{- $ocisHttpApiInsecure := .Values.insecure.ocisHttpApiInsecure -}}
{{- $externalLDAPinsecure := and .Values.features.externalUserManagement.enabled .Values.features.externalUserManagement.ldap.insecure -}}
{{- $noSMTPencryption := and .Values.features.emailNotifications.enabled (eq .Values.features.emailNotifications.smtp.encryption "none") -}}
{{- $s3Credentials := or (.Values.services.storageusers.storageBackend.driverConfig.s3ng.accessKey) (.Values.services.storageusers.storageBackend.driverConfig.s3ng.secretKey) -}}

{{ if or $noExternalUserManagement $noopCache $basicAuth $demoUsers $oidcIdpInsecure $ocisHttpApiInsecure $externalLDAPinsecure $noSMTPencryption }}
#################################################################################
######   WARNING: Your deployment of oCIS does not follow all best          #####
######   practices for production deployments of oCIS.                      #####
######                                                                      #####
######   Following best practices are not applied:                          #####
{{- if $noExternalUserManagement}}
######     - `features.externalUserManagement.enabled` should be            #####
######       set to `true`.                                                 #####
{{- end }}
{{- if $noopCache}}
######     - `cache.type` should not be set to `noop`                       #####
{{- end }}
{{- if $basicAuth}}
######     - `features.basicAuthentication` should be set to `false`        #####
{{- end }}
{{- if $demoUsers}}
######     - `features.demoUsers` should be set to `false`                  #####
{{- end }}
{{- if $oidcIdpInsecure}}
######     - `insecure.oidcIdpInsecure` should be set to `false`            #####
{{- end }}
{{- if $ocisHttpApiInsecure}}
######     - `insecure.ocisHttpApiInsecure` should be set to `false`        #####
{{- end }}
{{- if $externalLDAPinsecure}}
######     - `features.externalUserManagement.ldap.insecure` should         #####
######        be set to `false`                                             #####
{{- end }}
{{- if $noSMTPencryption}}
######     - `features.emailNotifications.smtp.encryption` should           #####
######        not be set to `none`                                          #####
{{- end }}
{{- if $s3Credentials }}
######     - `services.storageusers.storageBackend.driverConfig.s3ng`       #####
######        should not have `accessKey` or `secretKey` set.               #####
{{- end }}
#################################################################################
{{ end }}


{{- $idmUnpersisted := and (not .Values.features.externalUserManagement.enabled) (not .Values.services.idm.persistence.enabled) -}}
{{- $natsUnpersisted := and (not .Values.messagingSystem.external.enabled) (not .Values.services.nats.persistence.enabled) -}}
{{- $searchUnpersisted := not .Values.services.search.persistence.enabled -}}
{{- $storagesystemUnpersisted := not .Values.services.storagesystem.persistence.enabled -}}
{{- $webUnpersisted := not .Values.services.web.persistence.enabled -}}
{{- $storageusersUnpersisted := not .Values.services.storageusers.persistence.enabled -}}
{{- $storeUnpersisted := not .Values.services.store.persistence.enabled -}}

{{ if or $storagesystemUnpersisted $webUnpersisted $storageusersUnpersisted $storeUnpersisted $idmUnpersisted $searchUnpersisted $natsUnpersisted }}
#################################################################################
######   WARNING: Persistence is disabled for some services.                #####
######   You will lose your data when a service's pod is terminated.        #####
######                                                                      #####
######   Following services don't use persistence:                          #####
{{- if $storageusersUnpersisted }}
######     - storageusers                                                   #####
{{- end }}
{{- if $storagesystemUnpersisted }}
######     - storagesystem                                                  #####
{{- end }}
{{- if $webUnpersisted }}
######     - web                                                            #####
{{- end }}
{{- if $idmUnpersisted }}
######     - idm                                                            #####
{{- end }}
{{- if $storeUnpersisted }}
######     - store                                                          #####
{{- end }}
{{- if $searchUnpersisted }}
######     - search                                                         #####
{{- end }}
{{- if $natsUnpersisted }}
######     - nats                                                           #####
{{- end }}
#################################################################################
{{- end }}

#################################################################################
######   WARNING: Breaking changes may impact your deployment.              #####
#################################################################################
Please check the documentation for breaking changes by version:
https://doc.owncloud.com/ocis/next/deployment/container/orchestration/tab-pages/breaking-changes.html
