{{- if and .Values.services.storageusers.persistence.enabled .Values.services.storageusers.maintenance.cleanUpExpiredUploads.enabled }}
{{- include "ocis.basicServiceTemplates" (dict "scope" . "appName" "appNameStorageUsers" "appNameSuffix" "") -}}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: storage-users-clean-expired-uploads
  namespace: {{ template "ocis.namespace" . }}
  labels:
    {{- include "ocis.labels" . | nindent 4 }}
spec:
  schedule: "{{ .Values.services.storageusers.maintenance.cleanUpExpiredUploads.schedule }}"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      parallelism: 1
      template:
        metadata:
          labels:
            app: storage-users-clean-expired-uploads
            {{- include "ocis.labels" . | nindent 12 }}
        spec:
          {{- include "ocis.serviceAccount" . | nindent 10 }}
          restartPolicy: Never
          nodeSelector: {{ toYaml $.jobNodeSelector | nindent 12 }}
          containers:
            - name: storage-users-clean-expired-uploads
              {{- include "ocis.jobContainerImageOcis" . | nindent 14 }}
              command: ["ocis"]
              args: ["storage-users", "uploads", "clean"]
              securityContext:
                runAsNonRoot: true
                runAsUser: {{ .Values.securityContext.runAsUser }}
                runAsGroup: {{ .Values.securityContext.runAsGroup }}
                readOnlyRootFilesystem: true
              env:
                {{- include "ocis.serviceRegistry" . | nindent 16 }}
                # logging
                - name: STORAGE_USERS_LOG_COLOR
                  value: {{ .Values.logging.color | quote }}
                - name: STORAGE_USERS_LOG_LEVEL
                  value: {{ .Values.logging.level | quote }}
                - name: STORAGE_USERS_LOG_PRETTY
                  value: {{ .Values.logging.pretty | quote }}

                # oCIS storage driver (decomposed filesystem)
                {{- if  eq .Values.services.storageusers.storageBackend.driver "ocis" }}
                - name: STORAGE_USERS_DRIVER
                  value: ocis
                {{- end }}

                # S3ng storage driver (decomposed filesystem)
                {{- if  eq .Values.services.storageusers.storageBackend.driver "s3ng" }}
                - name: STORAGE_USERS_DRIVER
                  value: s3ng
                - name: STORAGE_USERS_S3NG_METADATA_BACKEND
                  value: {{ .Values.services.storageusers.storageBackend.driverConfig.s3ng.metadataBackend | quote }}
                - name: STORAGE_USERS_S3NG_ENDPOINT
                  value: {{ .Values.services.storageusers.storageBackend.driverConfig.s3ng.endpoint | quote }}
                - name: STORAGE_USERS_S3NG_REGION
                  value: {{ .Values.services.storageusers.storageBackend.driverConfig.s3ng.region | quote }}
                - name: STORAGE_USERS_S3NG_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "secrets.s3CredentialsSecret" . }}
                      key: accessKey
                - name: STORAGE_USERS_S3NG_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "secrets.s3CredentialsSecret" . }}
                      key: secretKey
                - name: STORAGE_USERS_S3NG_BUCKET
                  value: {{ .Values.services.storageusers.storageBackend.driverConfig.s3ng.bucket | quote }}
                {{- end }}

                - name: STORAGE_USERS_JWT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "secrets.jwtSecret" . }}
                      key: jwt-secret

                - name: OCIS_TRANSFER_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "secrets.transferSecret" . }}
                      key: transfer-secret

                - name: STORAGE_USERS_MOUNT_ID
                  valueFrom:
                    configMapKeyRef:
                      name: {{ include "config.storageUsers" . }}
                      key: storage-uuid

              resources: {{ toYaml .jobResources | nindent 16 }}

              volumeMounts:
                - name: tmp-volume
                  mountPath: /tmp
                - name: {{ include "ocis.persistence.dataVolumeName" . }}
                  mountPath: /var/lib/ocis

          {{- include "ocis.imagePullSecrets" $ | nindent 10 }}
          volumes:
            - name: tmp-volume
              emptyDir: {}
            {{- include "ocis.persistence.dataVolume" . | nindent 12 }}
{{ end }}
{{- if and .Values.services.storageusers.persistence.enabled .Values.services.storageusers.maintenance.purgeExpiredTrashBinItems.enabled }}
{{- include "ocis.basicServiceTemplates" (dict "scope" . "appName" "appNameStorageUsers" "appNameSuffix" "") -}}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: storage-users-purge-expired-trash-bin-items
  namespace: {{ template "ocis.namespace" . }}
  labels:
    {{- include "ocis.labels" . | nindent 4 }}
spec:
  schedule: "{{ .Values.services.storageusers.maintenance.purgeExpiredTrashBinItems.schedule }}"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      parallelism: 1
      template:
        metadata:
          labels:
            app: storage-users-purge-expired-trash-bin-items
            {{- include "ocis.labels" . | nindent 12 }}

        spec:
          {{- include "ocis.serviceAccount" . | nindent 10 }}
          restartPolicy: Never
          nodeSelector: {{ toYaml $.jobNodeSelector | nindent 12 }}
          containers:
            - name: storage-users-purge-expired-trash-bin-items
              {{- include "ocis.jobContainerImageOcis" . | nindent 14 }}
              command: ["ocis"]
              args: ["storage-users", "trash-bin", "purge-expired"]
              securityContext:
                runAsNonRoot: true
                runAsUser: {{ .Values.securityContext.runAsUser }}
                runAsGroup: {{ .Values.securityContext.runAsGroup }}
                readOnlyRootFilesystem: true
              env:
                {{- include "ocis.serviceRegistry" . | nindent 16 }}

                # logging
                - name: STORAGE_USERS_LOG_COLOR
                  value: {{ .Values.logging.color | quote }}
                - name: STORAGE_USERS_LOG_LEVEL
                  value: {{ .Values.logging.level | quote }}
                - name: STORAGE_USERS_LOG_PRETTY
                  value: {{ .Values.logging.pretty | quote }}

                - name: STORAGE_USERS_JWT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "secrets.jwtSecret" . }}
                      key: jwt-secret

                - name: OCIS_TRANSFER_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "secrets.transferSecret" . }}
                      key: transfer-secret

                - name: STORAGE_USERS_MOUNT_ID
                  valueFrom:
                    configMapKeyRef:
                      name: {{ include "config.storageUsers" . }}
                      key: storage-uuid

                # events
                - name: STORAGE_USERS_EVENTS_ENDPOINT
                {{- if not .Values.messagingSystem.external.enabled }}
                  value: {{ .appNameNats }}:9233
                {{- else }}
                  value: {{ .Values.messagingSystem.external.endpoint | quote }}
                - name: STORAGE_USERS_EVENTS_CLUSTER
                  value: {{ .Values.messagingSystem.external.cluster | quote }}
                - name: STORAGE_USERS_EVENTS_ENABLE_TLS
                  value: {{ .Values.messagingSystem.external.tls.enabled | quote }}
                - name: STORAGE_USERS_EVENTS_TLS_INSECURE
                  value: {{ .Values.messagingSystem.external.tls.insecure | quote }}
                - name: STORAGE_USERS_EVENTS_TLS_ROOT_CA_CERTIFICATE
                  {{- if not .Values.messagingSystem.external.tls.certTrusted }}
                  value: /etc/ocis/messaging-system-ca/messaging-system-ca.crt
                  {{- else }}
                  value: "" # no cert needed
                  {{- end }}
                {{- end }}

              resources: {{ toYaml .jobResources | nindent 16 }}

              volumeMounts:
                - name: tmp-volume
                  mountPath: /tmp
                - name: {{ include "ocis.persistence.dataVolumeName" . }}
                  mountPath: /var/lib/ocis

          {{- include "ocis.imagePullSecrets" $ | nindent 10 }}
          volumes:
            - name: tmp-volume
              emptyDir: {}
            {{- include "ocis.persistence.dataVolume" . | nindent 12 }}
{{ end }}
